# 🤖 AI와 함께 개인 블로그 프로젝트 완전 제작 가이드

이 문서는 GitHub Pages + Google Apps Script를 활용한 개인 블로그 프로젝트를 AI(ChatGPT, Claude 등)와 함께 처음부터 완전히 구현하기 위한 단계별 상세 가이드입니다.

## 📋 프로젝트 개요

### 최종 결과물
- **프론트엔드**: GitHub Pages 기반 정적 웹사이트
- **백엔드**: Google Apps Script + Google Sheets
- **에디터**: 리치 텍스트 에디터 (contenteditable 기반)
- **파일 업로드**: Google Drive 연동
- **관리자 시스템**: 로컬 인증 기반
- **반응형 디자인**: 모바일/태블릿/데스크톱 지원

### 핵심 기능
1. 블로그 포스트 CRUD (생성/읽기/수정/삭제)
2. 리치 텍스트 에디터 (이미지/동영상 업로드 포함)
3. 태그 기반 필터링 시스템
4. 아트워크 갤러리 페이지
5. 댓글 시스템
6. 방명록 기능
7. 관리자 인증
8. 반응형 웹 디자인

---

## 🚀 1단계: 프로젝트 초기 설정

### AI에게 요청할 프롬프트:

```
개인 블로그 프로젝트를 만들고 싶습니다. 다음 요구사항을 만족하는 프로젝트를 설계해주세요:

**기술 스택:**
- 프론트엔드: HTML5, CSS3, 바닐라 JavaScript (ES6+)
- 백엔드: Google Apps Script + Google Sheets (데이터베이스 역할)
- 파일 저장: Google Drive
- 배포: GitHub Pages
- 도메인: 커스텀 도메인 지원

**프로젝트 구조:**
blog1/
├── index.html (메인 페이지)
├── blog.html (블로그 목록)
├── post.html (개별 포스트 뷰)
├── editor.html (포스트 에디터)
├── artwork.html (아트워크 갤러리)
├── css/
│   ├── style.css (공통 스타일)
│   ├── blog.css (블로그 스타일)
│   ├── post.css (포스트 뷰 스타일)
│   ├── editor.css (에디터 스타일)
│   ├── artwork.css (갤러리 스타일)
│   └── header.css, footer.css, floating-actions.css
├── js/
│   ├── config.js (설정)
│   ├── auth.js (인증)
│   ├── sheets.js (API 통신)
│   ├── blog.js (블로그 목록)
│   ├── post.js (포스트 뷰)
│   ├── editor.js (에디터)
│   ├── artwork.js (갤러리)
│   ├── upload.js (파일 업로드)
│   └── utils.js (유틸리티)
├── apps-script/
│   └── Code.gs (Google Apps Script)
└── assets/
    └── (로고, 아이콘 등)

이 구조로 프로젝트 폴더를 생성하고 각 파일의 기본 템플릿을 제공해주세요.
```

---

## 🎨 2단계: HTML 구조 및 CSS 스타일링

### HTML 구조 요청 프롬프트:

```
blog.html 페이지의 HTML 구조를 다음 요구사항에 맞게 작성해주세요:

**레이아웃 구조:**
1. **헤더**: 네비게이션 메뉴, 로고, 모바일 햄버거 메뉴
2. **메인 콘텐츠**: 
   - 태그 필터 섹션 (가로 스크롤)
   - 포스트 그리드 (Masonry 레이아웃)
   - 페이지네이션
3. **푸터**: 소셜 링크, 연락처 정보

**SEO 최적화:**
- 시맨틱 HTML5 태그 사용
- 메타 태그 (title, description, keywords, og태그)
- JSON-LD 구조화 데이터

**접근성:**
- ARIA 레이블
- 스크린 리더 지원
- 키보드 네비게이션

**반응형:**
- 모바일: 1열 그리드
- 태블릿: 2열 그리드  
- 데스크톱: 3-4열 그리드

각 섹션별로 의미있는 클래스명과 ID를 부여해주세요.
```

### CSS 스타일링 요청 프롬프트:

```
모던하고 미니멀한 블로그 디자인을 위한 CSS를 작성해주세요:

**디자인 테마:**
- 색상: 화이트/그레이 기반, 포인트 컬러 1개
- 타이포그래피: Inter 폰트, 계층적 텍스트 크기
- 레이아웃: CSS Grid + Flexbox
- 애니메이션: 부드러운 hover 효과, 페이드 인/아웃

**CSS 변수 시스템:**
```css
:root {
    --primary-color: #007bff;
    --text-primary: #333;
    --text-secondary: #666;
    --bg-primary: #fff;
    --bg-secondary: #f8f9fa;
    --border-color: #e9ecef;
    --shadow: 0 2px 4px rgba(0,0,0,0.1);
    --border-radius: 8px;
    --transition: 0.3s ease;
}
```

**반응형 브레이크포인트:**
- Mobile: 480px 이하
- Tablet: 768px 이하 
- Desktop: 1024px 이상

**컴포넌트별 스타일:**
1. 포스트 카드 (hover 효과, 그림자)
2. 태그 필터 버튼
3. 로딩 스피너
4. 페이지네이션
5. 헤더 네비게이션 (모바일 메뉴 포함)

CSS Grid를 활용한 반응형 그리드 레이아웃을 구현해주세요.
```

---

## ⚙️ 3단계: JavaScript 아키텍처

### 메인 애플리케이션 구조 요청:

```
모듈화된 JavaScript 아키텍처를 설계해주세요:

**config.js 설정:**
```javascript
const CONFIG = {
    BLOG_TITLE: '블로그 제목',
    BLOG_AUTHOR: '작성자명',
    POSTS_PER_PAGE: 12,
    GOOGLE_APPS_SCRIPT_URL: 'https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec',
    GOOGLE_DRIVE_FOLDER_ID: 'YOUR_FOLDER_ID',
    ADMIN_PASSWORD: 'your_admin_password'
};
```

**주요 클래스 구조:**
1. **BlogApp**: 메인 애플리케이션 클래스
2. **PostManager**: 포스트 CRUD 관리
3. **AuthManager**: 인증 관리 (localStorage 기반)
4. **UIController**: UI 상태 관리
5. **SheetsAPI**: Google Sheets API 통신

**이벤트 기반 아키텍처:**
- 커스텀 이벤트를 활용한 컴포넌트 간 통신
- 상태 변경 시 자동 UI 업데이트
- 에러 처리 및 로딩 상태 관리

각 클래스의 메서드와 프로퍼티를 상세히 설계해주세요.
```

### API 통신 클래스 요청:

```
Google Sheets를 데이터베이스로 활용하는 SheetsAPI 클래스를 구현해주세요:

**데이터 구조 (Google Sheets 컬럼):**
A: ID (자동증가)
B: Title (제목)
C: Date (작성일)
D: Thumbnail (썸네일 URL)
E: Content (본문 HTML)
F: Tags (태그, 쉼표 구분)
G: Images (이미지 URLs, JSON)
H: Videos (동영상 URLs, JSON)
I: Status (published/draft/private)
J: Comments (댓글 JSON)

**필요한 메서드:**
- fetchPosts(): 모든 포스트 조회
- createPost(postData): 새 포스트 생성
- updatePost(postData): 포스트 수정
- deletePost(postId): 포스트 삭제
- filterByTag(posts, tag): 태그별 필터링
- getAllTags(posts): 모든 태그 추출

**에러 처리:**
- 네트워크 오류
- 권한 오류
- 데이터 파싱 오류
- CORS 이슈 해결

**캐싱 시스템:**
- localStorage를 활용한 포스트 캐싱
- 캐시 만료 시간 설정
- 데이터 변경 시 캐시 무효화

구체적인 구현 코드를 제공해주세요.
```

---

## 📝 4단계: 리치 텍스트 에디터 구현

### 에디터 요청 프롬프트:

```
블로그 포스트 작성을 위한 리치 텍스트 에디터를 구현해주세요:

**기본 기능:**
- contenteditable 기반 에디터
- 툴바: Bold, Italic, Underline, Heading, List, Link
- 단축키: Ctrl+B (Bold), Ctrl+I (Italic), Ctrl+U (Underline)
- 실시간 미리보기

**고급 기능:**
1. **이미지 업로드:**
   - 드래그 앤 드롭 지원
   - 클립보드 붙여넣기
   - 파일 선택 버튼
   - 업로드 진행률 표시
   - 이미지 크기 조절

2. **동영상 업로드:**
   - Google Drive 업로드
   - iframe 임베드 자동 생성
   - 썸네일 추출

3. **자동 저장:**
   - localStorage 기반 임시 저장
   - 5초마다 자동 저장
   - 페이지 새로고침 시 복구

**HTML 생성:**
- 깔끔한 HTML 구조 생성
- XSS 방지를 위한 HTML sanitization
- 미디어 파일에 CSS 클래스 자동 추가

**UI/UX:**
- 모바일 친화적 툴바
- 토스트 알림
- 로딩 상태 표시
- 에러 처리

구체적인 구현 코드와 HTML 구조를 제공해주세요.
```

### 파일 업로드 시스템 요청:

```
Google Drive를 활용한 파일 업로드 시스템을 구현해주세요:

**UploadManager 클래스:**
```javascript
class UploadManager {
    constructor() {
        this.uploadQueue = [];
        this.isUploading = false;
    }
    
    // 필요한 메서드들:
    // - handleImageUpload(file, onSuccess, onError)
    // - handleVideoUpload(file, onSuccess, onError)
    // - uploadToGoogleDrive(file, progressCallback)
    // - validateFile(file, type)
    // - showUploadProgress(message)
    // - updateProgress(element, progress, status)
}
```

**Google Drive API 연동:**
- OAuth 2.0 인증
- 파일 업로드
- 공개 URL 생성
- 폴더 구조 관리

**파일 검증:**
- 파일 크기 제한 (이미지: 10MB, 동영상: 100MB)
- 파일 형식 검증 (JPEG, PNG, GIF, WebP, MP4, WebM)
- 보안 검사

**진행률 및 에러 처리:**
- 업로드 진행률 바
- 업로드 취소 기능
- 재시도 로직
- 에러 메시지 표시

**썸네일 생성:**
- 이미지: 자동 리사이징
- 동영상: Google Drive 썸네일 URL 생성

구체적인 구현 코드를 작성해주세요.
```

---

## 🗄️ 5단계: Google Apps Script 백엔드

### Apps Script 기본 구조 요청:

```
Google Apps Script로 블로그 백엔드를 구현해주세요:

**기본 설정:**
```javascript
// 설정 상수
const SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID';
const BLOG_FOLDER_ID = 'YOUR_DRIVE_FOLDER_ID';
const ADMIN_KEY = 'your_admin_key';
const ALLOWED_ORIGINS = [
    'https://yourdomain.github.io',
    'http://localhost:5500'
];
```

**doGet() 함수:**
- 포스트 데이터 조회 (GET /posts)
- 개별 포스트 조회 (GET /posts/:id)
- 태그별 포스트 조회 (GET /posts?tag=tagname)
- 댓글 조회 (GET /comments/:postId)

**doPost() 함수:**
- 새 포스트 생성 (POST /posts)
- 포스트 수정 (PUT /posts/:id)
- 포스트 삭제 (DELETE /posts/:id)
- 댓글 추가 (POST /comments)
- 파일 업로드 (POST /upload)

**데이터 처리:**
- JSON 파싱 및 검증
- 데이터 sanitization
- 에러 응답 생성
- CORS 헤더 설정

**보안:**
- 관리자 키 검증
- 입력값 검증
- SQL 인젝션 방지
- 파일 업로드 검증

구체적인 함수별 구현 코드를 제공해주세요.
```

### CRUD 작업 구현 요청:

```
Google Sheets CRUD 작업을 처리하는 함수들을 구현해주세요:

**handlePostSave(requestData):**
- 새 포스트 데이터 검증
- 시트에 새 행 추가
- ID 자동 증가 (=ROW()-1 공식 사용)
- 생성 시간 자동 설정
- 성공/실패 응답 반환

**handlePostUpdate(requestData):**
- 포스트 ID로 기존 행 찾기
- 데이터 업데이트 (ID, 생성일 제외)
- 수정 시간 업데이트
- 성공/실패 응답 반환

**handlePostDelete(requestData):**
- 포스트 ID로 행 찾기
- 행 삭제 (또는 status를 'deleted'로 변경)
- 관련 파일 삭제 처리
- 성공/실패 응답 반환

**데이터 형식:**
```javascript
// 포스트 데이터 구조
{
    id: 1,
    title: "포스트 제목",
    date: "2024-01-01 12:00:00",
    thumbnail: "https://drive.google.com/...",
    content: "<p>HTML 내용</p>",
    tags: "tag1,tag2,tag3",
    images: "[{\"url\":\"...\",\"type\":\"image\"}]",
    videos: "[{\"url\":\"...\",\"type\":\"video\"}]",
    status: "published", // published, draft, private
    comments: "[]"
}
```

**에러 처리:**
- 필수 필드 검증
- 데이터 타입 검증
- 권한 검사
- 예외 상황 처리

각 함수의 상세 구현 코드를 작성해주세요.
```

---

## 🎨 6단계: 아트워크 갤러리 페이지

### 갤러리 구현 요청:

```
Pinterest 스타일의 아트워크 갤러리 페이지를 구현해주세요:

**HTML 구조 (artwork.html):**
- 헤더 네비게이션
- 태그 필터 섹션
- 그리드 갤러리 (Masonry 레이아웃)
- 무한 스크롤 또는 페이지네이션

**CSS 스타일 (artwork.css):**
```css
.artwork-posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    padding: 20px;
}

.artwork-post-card {
    aspect-ratio: 4 / 5; /* 4:5 비율 고정 */
    border-radius: 16px;
    overflow: hidden;
    position: relative;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.artwork-post-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 32px rgba(0,0,0,0.15);
}
```

**JavaScript (artwork.js):**
- 'artwork' 태그가 있는 포스트만 필터링
- 그리드 레이아웃 자동 조정
- 이미지 지연 로딩
- 라이트박스 효과

**반응형 디자인:**
- Mobile: 2열 그리드
- Tablet: 3열 그리드
- Desktop: 4-5열 그리드

**카드 오버레이:**
- 제목, 날짜, 태그 정보
- 그라데이션 배경
- 호버 시 상세 정보 표시

구체적인 구현 코드를 제공해주세요.
```

---

## 💬 7단계: 댓글 및 방명록 시스템

### 댓글 시스템 요청:

```
블로그 포스트용 댓글 시스템을 구현해주세요:

**데이터 구조:**
```javascript
// 댓글 객체
{
    id: "comment_1",
    postId: "post_123",
    author: "작성자명",
    email: "email@example.com", // 선택사항
    content: "댓글 내용",
    date: "2024-01-01T12:00:00Z",
    parentId: null, // 대댓글인 경우 부모 ID
    status: "approved" // approved, pending, spam
}
```

**기능 요구사항:**
1. 댓글 작성/수정/삭제
2. 대댓글 (중첩 댓글) 지원
3. 관리자 승인 시스템
4. 스팸 필터링 (간단한 키워드 필터)
5. 실시간 댓글 추가 (새로고침 없이)

**UI 구현:**
- 댓글 목록 (중첩 구조)
- 댓글 작성 폼
- 편집/삭제 버튼 (작성자만)
- 답글 버튼
- 로딩 상태 표시

**보안:**
- XSS 방지 (HTML 이스케이프)
- 스팸 방지 (간단한 캡차 또는 시간 제한)
- 입력값 검증

**Google Sheets 연동:**
- Comments 시트 생성
- CRUD 작업 구현
- 포스트별 댓글 조회

구체적인 HTML, CSS, JavaScript 구현 코드를 제공해주세요.
```

### 방명록 기능 요청:

```
사이트 방문자를 위한 방명록 기능을 구현해주세요:

**기능:**
- 방문자 메시지 작성
- 관리자 답글
- 메시지 목록 표시
- 페이지네이션

**데이터 구조:**
```javascript
{
    id: "guestbook_1",
    name: "방문자명",
    message: "방명록 내용",  
    date: "2024-01-01T12:00:00Z",
    adminReply: "관리자 답글", // 선택사항
    replyDate: "2024-01-02T12:00:00Z"
}
```

**UI 디자인:**
- 카드 스타일 메시지 표시
- 작성 폼
- 관리자 답글 구분 표시
- 애니메이션 효과

구현 코드를 제공해주세요.
```

---

## 🔐 8단계: 관리자 인증 시스템

### 인증 시스템 요청:

```
간단하지만 안전한 관리자 인증 시스템을 구현해주세요:

**AuthManager 클래스:**
```javascript
class AuthManager {
    constructor() {
        this.isAuthenticated = false;
        this.sessionKey = 'blog_admin_session';
    }
    
    // 필요한 메서드:
    // - login(password)
    // - logout()
    // - isLoggedIn()
    // - checkSession()
    // - generateSessionToken()
}
```

**보안 요구사항:**
- 비밀번호 해싱 (클라이언트 사이드)
- 세션 토큰 생성
- localStorage 기반 세션 관리
- 자동 로그아웃 (24시간)
- 무차별 대입 공격 방지 (시도 횟수 제한)

**UI 구성:**
- 로그인 모달/페이지
- 관리자 전용 버튼들
- 상태 표시 (로그인/로그아웃)
- 세션 만료 알림

**관리자 기능:**
1. 포스트 편집/삭제 버튼 표시
2. 비공개 포스트 보기
3. 댓글 승인/삭제
4. 방명록 관리
5. 통계 정보 확인

**권한 검증:**
- API 요청 시 토큰 검증
- 클라이언트 사이드 권한 체크
- 서버 사이드 권한 확인

구체적인 구현 코드를 제공해주세요.
```

---

## 🚀 9단계: 성능 최적화 및 SEO

### 성능 최적화 요청:

```
블로그의 성능을 최적화해주세요:

**이미지 최적화:**
- 이미지 지연 로딩 (Intersection Observer)
- WebP 포맷 지원
- 이미지 압축
- 적응형 이미지 크기

**JavaScript 최적화:**
- 코드 스플리팅
- 필수 스크립트 우선 로딩
- 비동기 로딩
- 중복 코드 제거

**CSS 최적화:**
- Critical CSS 인라인화
- 미사용 CSS 제거
- CSS 압축
- 폰트 최적화

**캐싱 전략:**
- 브라우저 캐싱 설정
- Service Worker 구현 (선택사항)
- API 응답 캐싱
- 이미지 캐싱

**Core Web Vitals 최적화:**
- LCP (Largest Contentful Paint) < 2.5s
- FID (First Input Delay) < 100ms  
- CLS (Cumulative Layout Shift) < 0.1

구체적인 최적화 코드와 설정을 제공해주세요.
```

### SEO 최적화 요청:

```
검색엔진 최적화를 위한 구현을 해주세요:

**메타 태그 시스템:**
```javascript
// 동적 메타 태그 생성
function updateMetaTags(post) {
    document.title = `${post.title} - ${CONFIG.BLOG_TITLE}`;
    
    // Open Graph
    updateMetaTag('og:title', post.title);
    updateMetaTag('og:description', post.excerpt);
    updateMetaTag('og:image', post.thumbnail);
    updateMetaTag('og:url', window.location.href);
    
    // Twitter Cards
    updateMetaTag('twitter:title', post.title);
    updateMetaTag('twitter:description', post.excerpt);
    updateMetaTag('twitter:image', post.thumbnail);
}
```

**구조화 데이터 (JSON-LD):**
- BlogPosting 스키마
- Person 스키마 (작성자)
- Organization 스키마
- BreadcrumbList 스키마

**사이트맵 생성:**
- sitemap.xml 동적 생성
- robots.txt 설정
- 캐노니컬 URL 설정

**기술적 SEO:**
- 시맨틱 HTML 구조
- 헤딩 태그 계층 구조
- 이미지 alt 속성
- 내부 링크 최적화

구체적인 구현 코드를 제공해주세요.
```

---

## 📱 10단계: 반응형 디자인 및 모바일 최적화

### 반응형 디자인 요청:

```
완벽한 반응형 웹 디자인을 구현해주세요:

**브레이크포인트 전략:**
```css
/* Mobile First 접근법 */
/* Mobile: 320px - 767px */
.posts-grid {
    grid-template-columns: 1fr;
    gap: 16px;
}

/* Tablet: 768px - 1023px */
@media (min-width: 768px) {
    .posts-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }
}

/* Desktop: 1024px+ */
@media (min-width: 1024px) {
    .posts-grid {
        grid-template-columns: repeat(3, 1fr);
        gap: 24px;
    }
}
```

**모바일 특화 기능:**
1. 터치 친화적 버튼 크기 (최소 44px)
2. 스와이프 제스처 지원
3. 모바일 키보드 대응
4. 세로/가로 모드 지원

**네비게이션:**
- 햄버거 메뉴
- 슬라이드 아웃 사이드바
- 하단 네비게이션 바 (선택사항)
- 탭 인터페이스

**타이포그래피:**
- 가독성 있는 폰트 크기
- 적절한 줄 간격
- 터치 디바이스용 폰트 최적화

**성능:**
- 모바일 최적화된 이미지
- 터치 지연 제거
- 모바일 전용 스타일시트

구체적인 CSS 미디어 쿼리와 JavaScript 터치 이벤트 처리 코드를 제공해주세요.
```

---

## 🔧 11단계: 개발 도구 및 배포

### GitHub Pages 배포 설정:

```
GitHub Pages를 통한 자동 배포 시스템을 설정해주세요:

**GitHub Actions 워크플로우 (.github/workflows/deploy.yml):**
```yaml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build
      run: npm run build
    
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
```

**빌드 스크립트 (package.json):**
```json
{
  "scripts": {
    "build": "npm run minify-css && npm run minify-js",
    "minify-css": "cleancss -o dist/css/style.min.css css/*.css",
    "minify-js": "uglifyjs js/*.js -o dist/js/app.min.js",
    "dev": "live-server --port=3000"
  }
}
```

**환경별 설정:**
- 개발환경: localhost 설정
- 프로덕션: 실제 도메인 설정
- 환경 변수 관리

**커스텀 도메인:**
- CNAME 파일 설정
- DNS 설정 가이드
- HTTPS 설정

구체적인 설정 파일들을 제공해주세요.
```

### 개발/디버깅 도구:

```
개발 및 디버깅을 위한 도구들을 구현해주세요:

**디버그 모드:**
```javascript
// config.js에 추가
const CONFIG = {
    DEBUG_MODE: true, // 개발 시 true, 배포 시 false
    LOG_LEVEL: 'info' // error, warn, info, debug
};

// 디버그 로깅 함수
function debugLog(level, message, data) {
    if (!CONFIG.DEBUG_MODE) return;
    
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;
    
    console.log(logMessage, data || '');
}
```

**에러 추적:**
- 전역 에러 핸들러
- API 에러 로깅
- 사용자 액션 추적
- 성능 메트릭 수집

**테스트 도구:**
- 간단한 단위 테스트
- API 엔드포인트 테스트
- 브라우저 호환성 테스트

**개발 서버:**
- Live reload
- 프록시 설정
- CORS 해결

구체적인 도구 구현 코드를 제공해주세요.
```

---

## 📋 12단계: 최종 체크리스트 및 배포

### 배포 전 체크리스트:

```
배포 전 최종 확인사항을 체크해주세요:

**기능 테스트:**
□ 포스트 CRUD 작업 (생성/읽기/수정/삭제)
□ 이미지/동영상 업로드
□ 태그 필터링
□ 검색 기능
□ 댓글 시스템
□ 관리자 인증
□ 반응형 레이아웃

**성능 테스트:**
□ PageSpeed Insights 점수 90+ 
□ 이미지 최적화 확인
□ 로딩 시간 3초 이내
□ 모바일 성능 테스트

**SEO 확인:**
□ 메타 태그 동적 생성
□ 구조화 데이터 검증
□ 사이트맵 생성
□ robots.txt 설정

**보안 점검:**
□ XSS 방지 검증
□ 인증 시스템 테스트
□ API 보안 확인
□ HTTPS 설정

**브라우저 호환성:**
□ Chrome, Firefox, Safari, Edge
□ 모바일 브라우저 (iOS Safari, Chrome Mobile)  
□ 태블릿 브라우저

**접근성:**
□ 스크린 리더 테스트
□ 키보드 네비게이션
□ 색상 대비 검사
□ ARIA 레이블 확인

각 항목별 테스트 방법과 해결책을 제시해주세요.
```

### 유지보수 가이드:

```
블로그 운영 및 유지보수를 위한 가이드를 작성해주세요:

**정기 점검 사항:**
1. Google Apps Script 실행 한도 확인
2. Google Drive 저장공간 모니터링  
3. 사이트 성능 모니터링
4. 보안 업데이트 확인

**백업 전략:**
- Google Sheets 정기 백업
- 업로드된 파일 백업
- 코드 버전 관리

**모니터링 도구:**
- Google Analytics 설정
- Search Console 연동
- 에러 로깅 시스템

**확장 계획:**
- 새 기능 추가 방법
- 데이터베이스 마이그레이션
- 성능 최적화 방안

**문제 해결:**
- 자주 발생하는 문제와 해결책
- 디버깅 방법
- 사용자 문의 대응

구체적인 가이드를 작성해주세요.
```

---

## 🎯 추가 팁 및 주의사항

### AI와 협업할 때 유용한 팁:

1. **단계별 진행**: 한 번에 모든 것을 요청하지 말고 단계별로 진행
2. **구체적인 요구사항**: 모호한 표현보다는 구체적인 기능 명세 제공
3. **예시 코드 요청**: "이런 기능을 구현해줘"보다는 "이런 코드 구조로 구현해줘" 형태로 요청
4. **에러 해결**: 에러 발생 시 정확한 에러 메시지와 상황 설명 제공
5. **반복 개선**: 첫 번째 결과물을 기반으로 계속 개선 요청

### 주의사항:

1. **Google Apps Script 제한사항**: 
   - 실행 시간 제한 (6분)
   - 일일 실행 한도
   - 파일 크기 제한

2. **GitHub Pages 제한사항**:
   - 정적 사이트만 가능
   - 월 100GB 대역폭 제한
   - 시간당 10회 빌드 제한

3. **보안 고려사항**:
   - API 키 노출 방지
   - 클라이언트 사이드 검증의 한계
   - CORS 정책 이해

### 성공을 위한 핵심 포인트:

1. **사용자 경험 우선**: 기술적 완성도보다 사용자 경험에 집중
2. **점진적 개발**: MVP부터 시작해서 점진적으로 기능 추가
3. **테스트**: 각 단계마다 충분한 테스트 진행
4. **문서화**: 코드와 설정에 대한 문서화
5. **피드백**: 실제 사용자들의 피드백 수집 및 반영

---

이 가이드를 따라 AI와 함께 단계별로 진행하면 완전히 동일한 기능의 개인 블로그를 구축할 수 있습니다. 각 단계별로 충분한 시간을 들여 구현하고 테스트하는 것이 성공의 핵심입니다.